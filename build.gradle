// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "config.gradle"

//配置当前的编译文件，它包含这个应用中的唯一子项目--app
//定义了全局构建设置。
//JCenter仓库的构建脚本块。
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }

    //
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        //classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        /**
         * realm官方文档: https://realm.io/docs/java/latest/
         * 写的不错的blog: https://www.cnblogs.com/liushilin/p/5752099.html
         * 原理: http://www.infoq.com/cn/articles/introduce-and-common-problems-of-java-realm-principle
         *   Realm 是一个 MVCC 数据库 ，底层用 C++ 编写。MVCC 指的是多版本并发控制。
         *     MVCC 解决了一个重要的并发问题：在所有的数据库中都有这样的时候，
         *     当有人正在写数据库的时候有人又想读取数据库了（例如，不同的线程可以同时读取或者写入同一个数据库）。
         *     这会导致数据的不一致性 - 可能当你读取记录的时候一个写操作才部分结束。如果数据库允许这种事情发生，你就会得到和最终数据库里的数据不一致的数据。
         *
         *   demo: https://github.com/caoyongren/RealmTest
         * 但是我还要简单写一部分:
         * 使用:
         *   1. 工程gradle:(可以看本项目的添加)
         *     注意: 如果你的studio 版本是2.0则用1.1
         *     classpath 'io.realm:realm-gradle-plugin:1.1.0'
         *     android studio 3.0则和本项目一致
         *     classpath "io.realm:realm-gradle-plugin:3.1.1"
         *   2. 在app下的gradle头部添加
         *     apply plugin: 'realm-android'
         *   3.查看demo:
         *     这里注意几个问题:
         *       1.助手类
         *         Realm.init(context);//先进行init
         *         RealmConfiguration config = new RealmConfiguration.Builder().builder();
         *       2. 使用的时候不要忘记关闭；
         * */
        classpath "io.realm:realm-gradle-plugin:3.1.1"
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://raw.githubusercontent.com/Pgyer/mvn_repo_pgyer/master" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
